import 'dart:math';

/// A comprehensive list of 150 realistic GitHub commit messages for Flutter development.
/// This list can be used for testing, demonstrations, or as a reference for common commit patterns.
/// The messages cover various types of commits including features, bug fixes, documentation, styling,
/// refactoring, testing, and general chores.
final List<String> commitMessage = [
  // Features
  'feat: Implement user authentication with Firebase Auth',
  'feat: Add BLoC pattern for state management on login screen',
  'feat: Introduce dynamic theming with Provider',
  'feat: Develop user profile page with editable fields',
  'feat: Integrate Cloud Firestore for real-time data persistence',
  'feat: Add search functionality to a ListView.builder',
  'feat: Implement push notifications with Firebase Cloud Messaging (FCM)',
  'feat: Create new API service using Dio for network requests',
  'feat: Add image picker and cropper for profile picture uploads',
  'feat: Implement password reset functionality via email link',
  'feat: Add real-time chat feature using Firestore streams',
  'feat: Create settings page using shared_preferences',
  'feat: Integrate charts_flutter for data visualization',
  'feat: Add bottom navigation bar for main app sections',
  'feat: Implement hero animations for smooth page transitions',
  'feat: Add product filtering and sorting with Riverpod',
  'feat: Create a reusable custom dialog widget',
  'feat: Implement infinite scroll with a scroll controller listener',
  'feat: Add localization support for multiple languages using intl package',
  'feat: Develop a new onboarding flow with PageView',

  // Bug Fixes
  'fix: Resolve RenderFlex overflow error on small screens',
  'fix: Correct state not updating on widget rebuild',
  'fix: Patch async gap causing race condition in initState',
  'fix: Prevent SQL injection in sqflite query',
  'fix: Fix broken image links from network URLs',
  'fix: Ensure form validation triggers correctly on submit',
  'fix: Correct alignment of widgets within a Row/Column',
  'fix: Resolve late initialization error in a stateful widget',
  'fix: Fix bug where users could not update their profile data',
  'fix: Patch issue causing occasional crashes on Android 12+',
  'fix: Prevent duplicate items from being added to a list',
  'fix: Fix off-by-one error in list indexing',
  'fix: Correctly handle null values from JSON parsing',
  'fix: Resolve stack overflow from infinite widget build loop',
  'fix: Fix typo in error message constant',
  'fix: Ensure proper state cleanup in dispose method',
  'fix: Correct calculation in a business logic model',
  'fix: Fix broken navigation route in GoRouter config',
  'fix: Resolve issue where keyboard hides a TextField',
  'fix: Patch memory leak in an AnimationController',

  // Documentation
  'docs: Add initial README.md with project setup instructions',
  'docs: Update widget comments to explain build logic',
  'docs: Add API documentation for the data service layer',
  'docs: Create a CONTRIBUTING.md guide for new developers',
  'docs: Update code of conduct',
  'docs: Add inline comments to complex BLoC logic',
  'docs: Explain environment variable setup for Flavors',
  'docs: Document the new state management approach',
  'docs: Update project architecture diagram',
  'docs: Add examples for custom widget usage',
  'docs: Fix typos in pubspec.yaml description',
  'docs: Document deployment process for iOS and Android',
  'docs: Add DartDoc comments to public methods',
  'docs: Update license year',
  'docs: Create a wiki page for common build issues',
  
  // Styling & UI
  'style: Refactor UI with const constructors for performance',
  'style: Update ThemeData to match new brand guidelines',
  'style: Improve responsive layout using LayoutBuilder and MediaQuery',
  'style: Add custom animations with AnimationController',
  'style: Increase font size for better accessibility',
  'style: Replace custom styling with a consistent theme extension',
  'style: Update form input decoration for consistency',
  'style: Add smooth page transitions with PageTransitionsBuilder',
  'style: Refine spacing and padding across the app',
  'style: Create a consistent set of custom icons',
  'style: Remove unused assets from pubspec.yaml',
  'style: Format code with `dart format`',
  'style: Adjust line-height for body text in TextStyles',
  'style: Improve focus states for form fields',
  'style: Standardize card component design with a custom widget',

  // Refactoring
  'refactor: Extract business logic from widgets into BLoCs/ViewModels',
  'refactor: Convert StatefulWidget to StatelessWidget with state management',
  'refactor: Simplify complex nested widget trees',
  'refactor: Rename variables for clarity and convention',
  'refactor: Break down large build methods into smaller private widgets',
  'refactor: Improve state management by migrating from Provider to Riverpod',
  'refactor: Remove redundant code and duplication in models',
  'refactor: Update legacy Future-based code to use async/await',
  'refactor: Move utility functions to a shared helper directory',
  'refactor: Optimize ListViews for performance with itemExtent',
  'refactor: Restructure project folders by feature',
  'refactor: Replace http package with Dio for better request management',
  'refactor: Decouple modules for better separation of concerns',
  'refactor: Use freezed for immutable data classes and unions',
  'refactor: Abstract repository layer for data sources',

  // Testing
  'test: Add widget tests for the login screen',
  'test: Write integration tests for the full authentication flow',
  'test: Implement end-to-end tests with patrol',
  'test: Increase test coverage for critical business logic',
  'test: Add unit tests for utility functions',
  'test: Mock Dio client for testing network layer',
  'test: Fix failing test in the CI pipeline',
  'test: Add tests for edge cases in form validation',
  'test: Configure mocktail for mocking dependencies',
  'test: Write tests for the search functionality logic',
  'test: Add unit tests for Riverpod providers',
  'test: Implement golden tests for UI consistency',
  'test: Add tests for accessibility violations',
  'test: Refactor existing tests for better readability',
  'test: Configure continuous integration with GitHub Actions',

  // Chores & Build
  'chore: Upgrade dependencies with `flutter pub upgrade`',
  'chore: Configure lint rules in analysis_options.yaml',
  'chore: Set up build_runner for code generation',
  'chore: Update build script to handle different flavors',
  'chore: Add new fonts and images to pubspec.yaml',
  'chore: Bump app version in pubspec.yaml',
  'chore: Configure Gradle for Android release build',
  'chore: Automate deployments with Codemagic or Fastlane',
  'chore: Remove unused packages from pubspec.yaml',
  'chore: Update environment variable configuration',
  'chore: Add code coverage tool to CI pipeline',
  'chore: Optimize image assets for performance',
  'chore: Release: version 2.0.0',
  'chore: Revert "feat: Introduce experimental feature"',
  'chore: Merge branch \'develop\' into \'main\'',
  'chore: Update Flutter SDK constraint in pubspec.yaml',
  'chore: Add husky for pre-commit hooks',
  'chore: Clean up print statements',
  'chore: Configure iOS schemes for different environments',
  'chore: Initial commit',

  // Miscellaneous
  'refactor(auth): Simplify token refresh logic in interceptor',
  'fix(api): Handle Dio network exceptions gracefully',
  'feat(admin): Build new admin dashboard section',
  'style(home): Redesign hero section of home screen',
  'docs(api): Correct parameter name in Dio client',
  'test(profile): Add widget tests for profile picture upload',
  'chore(deps): Upgrade flutter_bloc to latest version',
  'fix(ios): Correct viewport padding for notches',
  'feat: Add CSV data export functionality',
  'style: Ensure consistent widget spacing with a constants file',
  'refactor: Use GoRouter for declarative navigation',
  'fix: Prevent form resubmission on button double tap',
  'docs: Clarify error codes from backend API',
  'test: Add tests for password strength validation logic',
  'chore: Initialize project with `flutter create`'
];

String getRandomCommitMessage() {
  final random = Random();
  final randomIndex = random.nextInt(commitMessage.length);
  return commitMessage[randomIndex];
}
